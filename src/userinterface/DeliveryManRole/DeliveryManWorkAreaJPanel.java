/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DeliveryManRole;

import Business.DeliveryMan.DeliveryManStore;
import Business.EcoSystem;
import Business.Order.Order;
import Business.Order.OrderStore;

import Business.UserAccount.UserAccount;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author juile
 */
public class DeliveryManWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    
    
    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public DeliveryManWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem business, DeliveryManStore deliveryManDirectory, OrderStore orderDirectory) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
             
        populateTable();
    }
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel) tblDelivery.getModel();
        model.setRowCount(0);
        for (Order order : business.getOrderDirectory().getOrderDir()) {
            if (order.getDeliveryMan() != null) {
                if (order.getDeliveryMan().getDeliveryID().equalsIgnoreCase(userAccount.getEmployee().getName())) {
                    Object[] row = new Object[6];
                     row[0] = order.getOrderNo();
                     row[1] = order.getStatus();
                     row[2] = order.getSender();
                     row[3] = order.getRestaurant().getRestAddress();
                     row[4] = order.getCustomer().getCustAddr();
                     row[5] = order.getMessage();
                    
                    model.addRow(row);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnRefresh = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDelivery = new javax.swing.JTable();
        btnConfirmDelivery = new javax.swing.JButton();
        btnDeliveryComplete = new javax.swing.JButton();
        lblDeliDetails = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 204));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnRefresh.setBackground(new java.awt.Color(204, 255, 255));
        btnRefresh.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnRefresh.setForeground(new java.awt.Color(0, 51, 51));
        btnRefresh.setText("Refresh");
        btnRefresh.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(711, 55, -1, -1));

        tblDelivery.setBackground(new java.awt.Color(255, 255, 204));
        tblDelivery.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        tblDelivery.setForeground(new java.awt.Color(0, 51, 51));
        tblDelivery.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Order No", "Order Status", "Ordered By", "Restaurant Address", "Customer Address", "Customer Feedback"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblDelivery);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(14, 96, 790, 130));

        btnConfirmDelivery.setBackground(new java.awt.Color(255, 255, 204));
        btnConfirmDelivery.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnConfirmDelivery.setForeground(new java.awt.Color(0, 51, 51));
        btnConfirmDelivery.setText("Confirm Pickup");
        btnConfirmDelivery.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnConfirmDelivery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmDeliveryActionPerformed(evt);
            }
        });
        add(btnConfirmDelivery, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 260, 140, 35));

        btnDeliveryComplete.setBackground(new java.awt.Color(204, 255, 255));
        btnDeliveryComplete.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnDeliveryComplete.setForeground(new java.awt.Color(0, 51, 51));
        btnDeliveryComplete.setText("Delivery Complete");
        btnDeliveryComplete.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnDeliveryComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeliveryCompleteActionPerformed(evt);
            }
        });
        add(btnDeliveryComplete, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 260, 140, 33));

        lblDeliDetails.setBackground(new java.awt.Color(204, 255, 255));
        lblDeliDetails.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblDeliDetails.setForeground(new java.awt.Color(0, 51, 51));
        lblDeliDetails.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDeliDetails.setText("Delivery Information");
        add(lblDeliDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(333, 25, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        populateTable();
        btnDeliveryComplete.setVisible(true);
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnConfirmDeliveryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmDeliveryActionPerformed
        // TODO add your handling code here:
                int selectedRow = tblDelivery.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row!");
            return;
        }
        String orderStatus = (String) tblDelivery.getValueAt(selectedRow, 1);
        String selectedOrderId = (String) tblDelivery.getValueAt(selectedRow, 0);
       if(orderStatus.equals("Completed")){
           btnDeliveryComplete.setVisible(false);
           JOptionPane.showMessageDialog(null, "Order has already been completed!");
       }
       else{
           
           btnDeliveryComplete.setVisible(true);
        Order order = business.getOrderDirectory().fetchOrders(selectedOrderId);
        order.setStatus("Out For Delivery");
        JOptionPane.showMessageDialog(null, "Order has been updated!");
        populateTable();
       }
    }//GEN-LAST:event_btnConfirmDeliveryActionPerformed

    private void btnDeliveryCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeliveryCompleteActionPerformed
        int selectedRow = tblDelivery.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row first!");
            return;
        }

        String selectedOrderId = (String) tblDelivery.getValueAt(selectedRow, 0);
        Order order = business.getOrderDirectory().fetchOrders(selectedOrderId);

        if (order.getStatus().trim().equalsIgnoreCase("Out For Delivery")) {
            order.setStatus("Completed");
            JOptionPane.showMessageDialog(null, "Order has been updated!");
            populateTable();
        } else {
            JOptionPane.showMessageDialog(null, "Kindly confirm the order pick-up before confirming delivery!");
        }
    }//GEN-LAST:event_btnDeliveryCompleteActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirmDelivery;
    private javax.swing.JButton btnDeliveryComplete;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDeliDetails;
    private javax.swing.JTable tblDelivery;
    // End of variables declaration//GEN-END:variables
}
