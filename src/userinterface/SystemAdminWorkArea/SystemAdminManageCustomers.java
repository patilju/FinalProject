/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SystemAdminWorkArea;

import Business.Customer.Customer;
import Business.Customer.EmailValidation;
import Business.DeliveryMan.DeliveryMan;
import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Role.AdminRole;
import Business.Role.CustomerRole;
import Business.Role.DeliveryManRole;
import Business.SupplierEmp.SupplierEmp;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nupoorkorde
 */
public class SystemAdminManageCustomers extends javax.swing.JPanel {

    /**
     * Creates new form SystemAdminManageCustomers
     */
    private JPanel userProcessContainerSAMC;
    private EcoSystem ecosystem;
    
    public SystemAdminManageCustomers(JPanel userProcessContainer, EcoSystem ecosystem) {
        initComponents();
        this.userProcessContainerSAMC = userProcessContainer;
        this.ecosystem = ecosystem;
        
        SystemAMCUsernameText.setEnabled(false);
        SystemAMCPasswordText.setEnabled(false);
        SystemAMCConfirmPasswordText.setEnabled(false);
        SystemAMCNameText.setEnabled(false);
        SystemAMCPhoneNumberText.setEnabled(false);
        SystemAMCAddressText.setEnabled(false);
        SystemAMCSubmitButton.setEnabled(false);
        SystemAMCDeleteButton.setEnabled(false);
        SystemAMCViewButton.setEnabled(false);
         emailIDField.setEnabled(false);
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SystemAMCBackButton = new javax.swing.JButton();
        SystemAMCSubmitButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        SystemAMCTable = new javax.swing.JTable();
        SystemAMCViewButton = new javax.swing.JButton();
        SystemAMCLabel1 = new javax.swing.JLabel();
        SystemAMCDeleteButton = new javax.swing.JButton();
        SystemAMCNameLabel = new javax.swing.JLabel();
        emailIDField = new javax.swing.JTextField();
        SystemAMCAddressLabel1 = new javax.swing.JLabel();
        SystemAMCCreateButton = new javax.swing.JButton();
        SystemAMCNameText = new javax.swing.JTextField();
        SystemAMCUsernameText = new javax.swing.JTextField();
        SystemAMCPhoneNumberText = new javax.swing.JTextField();
        SystemAMCPasswordText = new javax.swing.JTextField();
        SystemAMCPhoneNumberLabel = new javax.swing.JLabel();
        SystemAMCConfirmPasswordText = new javax.swing.JTextField();
        SystemAMCAddressLabel = new javax.swing.JLabel();
        SendEmailButton = new javax.swing.JButton();
        SystemAMCUsernameLabel = new javax.swing.JLabel();
        SystemAMCAddressText = new javax.swing.JTextField();
        SystemAMCPasswordLabel = new javax.swing.JLabel();
        SystemAMCConfirmPasswordLabel = new javax.swing.JLabel();
        SystemAMCSeparator = new javax.swing.JSeparator();
        SystemAMCLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(null);

        SystemAMCBackButton.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        SystemAMCBackButton.setText("< Back");
        SystemAMCBackButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        SystemAMCBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SystemAMCBackButtonActionPerformed(evt);
            }
        });
        add(SystemAMCBackButton);
        SystemAMCBackButton.setBounds(10, 24, 61, 23);

        SystemAMCSubmitButton.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        SystemAMCSubmitButton.setText("Register");
        SystemAMCSubmitButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        SystemAMCSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SystemAMCSubmitButtonActionPerformed(evt);
            }
        });
        add(SystemAMCSubmitButton);
        SystemAMCSubmitButton.setBounds(430, 660, 259, 40);

        SystemAMCTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        SystemAMCTable.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        SystemAMCTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serial No.", "Customer Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        SystemAMCTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SystemAMCTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(SystemAMCTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(205, 79, 1030, 133);

        SystemAMCViewButton.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        SystemAMCViewButton.setText("View Customer ");
        SystemAMCViewButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        SystemAMCViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SystemAMCViewButtonActionPerformed(evt);
            }
        });
        add(SystemAMCViewButton);
        SystemAMCViewButton.setBounds(10, 80, 140, 59);

        SystemAMCLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        SystemAMCLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SystemAMCLabel1.setText("Manage Customers");
        add(SystemAMCLabel1);
        SystemAMCLabel1.setBounds(185, 18, 445, 29);

        SystemAMCDeleteButton.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        SystemAMCDeleteButton.setText("Delete Customer");
        SystemAMCDeleteButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        SystemAMCDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SystemAMCDeleteButtonActionPerformed(evt);
            }
        });
        add(SystemAMCDeleteButton);
        SystemAMCDeleteButton.setBounds(10, 150, 140, 58);

        SystemAMCNameLabel.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        SystemAMCNameLabel.setText("Name:");
        add(SystemAMCNameLabel);
        SystemAMCNameLabel.setBounds(230, 250, 176, 15);

        emailIDField.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        emailIDField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        emailIDField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailIDFieldActionPerformed(evt);
            }
        });
        add(emailIDField);
        emailIDField.setBounds(420, 390, 259, 30);

        SystemAMCAddressLabel1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        SystemAMCAddressLabel1.setText("Email:");
        add(SystemAMCAddressLabel1);
        SystemAMCAddressLabel1.setBounds(220, 390, 176, 31);

        SystemAMCCreateButton.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        SystemAMCCreateButton.setText("Create Customer");
        SystemAMCCreateButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        SystemAMCCreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SystemAMCCreateButtonActionPerformed(evt);
            }
        });
        add(SystemAMCCreateButton);
        SystemAMCCreateButton.setBounds(10, 230, 140, 54);

        SystemAMCNameText.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        SystemAMCNameText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        SystemAMCNameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SystemAMCNameTextActionPerformed(evt);
            }
        });
        add(SystemAMCNameText);
        SystemAMCNameText.setBounds(420, 240, 259, 31);

        SystemAMCUsernameText.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        SystemAMCUsernameText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        add(SystemAMCUsernameText);
        SystemAMCUsernameText.setBounds(430, 510, 259, 32);

        SystemAMCPhoneNumberText.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        SystemAMCPhoneNumberText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        add(SystemAMCPhoneNumberText);
        SystemAMCPhoneNumberText.setBounds(420, 290, 259, 30);

        SystemAMCPasswordText.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        SystemAMCPasswordText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        add(SystemAMCPasswordText);
        SystemAMCPasswordText.setBounds(430, 550, 259, 30);

        SystemAMCPhoneNumberLabel.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        SystemAMCPhoneNumberLabel.setText("Phone Number:");
        add(SystemAMCPhoneNumberLabel);
        SystemAMCPhoneNumberLabel.setBounds(220, 290, 176, 30);

        SystemAMCConfirmPasswordText.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        SystemAMCConfirmPasswordText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        add(SystemAMCConfirmPasswordText);
        SystemAMCConfirmPasswordText.setBounds(430, 590, 259, 31);

        SystemAMCAddressLabel.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        SystemAMCAddressLabel.setText("Address:");
        add(SystemAMCAddressLabel);
        SystemAMCAddressLabel.setBounds(220, 340, 176, 31);

        SendEmailButton.setBackground(new java.awt.Color(255, 204, 153));
        SendEmailButton.setText("Get Credendials");
        SendEmailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendEmailButtonActionPerformed(evt);
            }
        });
        add(SendEmailButton);
        SendEmailButton.setBounds(460, 460, 160, 30);

        SystemAMCUsernameLabel.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        SystemAMCUsernameLabel.setText("Username: ");
        add(SystemAMCUsernameLabel);
        SystemAMCUsernameLabel.setBounds(200, 510, 168, 32);

        SystemAMCAddressText.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        SystemAMCAddressText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        SystemAMCAddressText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SystemAMCAddressTextActionPerformed(evt);
            }
        });
        add(SystemAMCAddressText);
        SystemAMCAddressText.setBounds(420, 340, 259, 30);

        SystemAMCPasswordLabel.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        SystemAMCPasswordLabel.setText("Password: ");
        add(SystemAMCPasswordLabel);
        SystemAMCPasswordLabel.setBounds(200, 550, 176, 38);

        SystemAMCConfirmPasswordLabel.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        SystemAMCConfirmPasswordLabel.setText("Confirm Password:");
        add(SystemAMCConfirmPasswordLabel);
        SystemAMCConfirmPasswordLabel.setBounds(190, 590, 176, 31);

        SystemAMCSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
        add(SystemAMCSeparator);
        SystemAMCSeparator.setBounds(168, 11, 13, 506);

        SystemAMCLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/SystemAdminManageCustomers.png"))); // NOI18N
        add(SystemAMCLabel);
        SystemAMCLabel.setBounds(10, 20, 1240, 780);
    }// </editor-fold>//GEN-END:initComponents

    private void SystemAMCBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SystemAMCBackButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainerSAMC.remove(this);
        Component[] componentArray = userProcessContainerSAMC.getComponents();
        Component component = componentArray[componentArray.length - 1];
        SystemAdminWorkAreaJPanel dwjp = (SystemAdminWorkAreaJPanel) component;
        //dwjp.populateTree();
        CardLayout layout = (CardLayout) userProcessContainerSAMC.getLayout();
        layout.previous(userProcessContainerSAMC);
    }//GEN-LAST:event_SystemAMCBackButtonActionPerformed

    private void SystemAMCSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SystemAMCSubmitButtonActionPerformed
        String pass2 = "1234";
        String CustomerUserName = EmailValidation.generateUserName(SystemAMCNameText.getText());
        String CustomrPassword = EmailValidation.generatePassword(SystemAMCNameText.getText().concat(pass2));
        
        if(validateThisSAMC())
        {
            Employee e = ecosystem.getEmployeeDirectory().createEmployee(SystemAMCNameText.getText(), SystemAMCAddressText.getText(), SystemAMCPhoneNumberText.getText());
           // SupplierEmp se = ecosystem.getSupplierEmpDirectory().createSupplierEmp(txtNameSAMC.getText(), txtAddressSAMC.getText(), txtPhoneSAMC.getText());

            UserAccount ua = ecosystem.getUserAccountDirectory().createUserAccount(CustomerUserName, CustomrPassword, e, new CustomerRole());
            if(ua != null)
            {
               
                Customer c = ecosystem.getCustomerDirectory().createCustomer(SystemAMCNameText.getText(), SystemAMCAddressText.getText(), SystemAMCPhoneNumberText.getText());
                JOptionPane.showMessageDialog(null, "Customer account created successfully for " + c.getCustomerName());
                populateTable();
                SystemAMCCreateButton.setEnabled(true);
                SystemAMCUsernameText.setText("");
                SystemAMCUsernameText.setEnabled(false);
                SystemAMCPasswordText.setText("");
                SystemAMCPasswordText.setEnabled(false);
                SystemAMCConfirmPasswordText.setText("");
                SystemAMCConfirmPasswordText.setEnabled(false);
                SystemAMCNameText.setText("");
                SystemAMCNameText.setEnabled(false);
                SystemAMCPhoneNumberText.setText("");
                SystemAMCPhoneNumberText.setEnabled(false);
                SystemAMCAddressText.setText("");
                SystemAMCAddressText.setEnabled(false);
                 emailIDField.setEnabled(false);
                SystemAMCSubmitButton.setEnabled(false);
            }
            else 
            {
                ecosystem.getEmployeeDirectory().deleteEmployee(e);
                JOptionPane.showMessageDialog(null,"Username " + CustomerUserName + " already exists!", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
        
        else
        {
            return;
        }
    }//GEN-LAST:event_SystemAMCSubmitButtonActionPerformed

    private void SystemAMCTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SystemAMCTableMouseClicked
        // TODO add your handling code here:
        int selectedRow = SystemAMCTable.getSelectedRow();
        if (selectedRow >= 0)
        {
            SystemAMCDeleteButton.setEnabled(true);
            SystemAMCViewButton.setEnabled(true);
        }
    }//GEN-LAST:event_SystemAMCTableMouseClicked

    private void SystemAMCViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SystemAMCViewButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = SystemAMCTable.getSelectedRow();
        if (selectedRow >= 0)
        {
            Customer selectedCustomer = (Customer) SystemAMCTable.getValueAt(selectedRow, 1);
            SystemAdminUpdateCustomer fs = new SystemAdminUpdateCustomer(userProcessContainerSAMC, selectedCustomer, ecosystem);
            userProcessContainerSAMC.add("SysAdminUpdateEmployees", fs);
            CardLayout layout = (CardLayout) userProcessContainerSAMC.getLayout();
            layout.next(userProcessContainerSAMC);
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Please select a row!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
    }//GEN-LAST:event_SystemAMCViewButtonActionPerformed

    private void SystemAMCDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SystemAMCDeleteButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = SystemAMCTable.getSelectedRow();
        if (selectedRow >= 0)
        {
            Customer selectedCustomer = (Customer) SystemAMCTable.getValueAt(selectedRow, 1);
            ecosystem.getCustomerDirectory().deleteCustomer(selectedCustomer);
            JOptionPane.showMessageDialog(null, "Customer " + selectedCustomer.getCustomerName()+ " deleted successfully!");
            populateTable();
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Please select a row!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
    }//GEN-LAST:event_SystemAMCDeleteButtonActionPerformed

    private void SystemAMCCreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SystemAMCCreateButtonActionPerformed
        // TODO add your handling code here:
        SystemAMCCreateButton.setEnabled(false);
        //SystemAMCUsernameText.setEnabled(true);
        //SystemAMCPasswordText.setEnabled(true);
        //SystemAMCConfirmPasswordText.setEnabled(true);
        SystemAMCNameText.setEnabled(true);
        emailIDField.setEnabled(true);
        SystemAMCPhoneNumberText.setEnabled(true);
        SystemAMCAddressText.setEnabled(true);
        SystemAMCSubmitButton.setEnabled(true);
        SystemAMCDeleteButton.setEnabled(true);
        SystemAMCViewButton.setEnabled(true);
    }//GEN-LAST:event_SystemAMCCreateButtonActionPerformed

    private void SystemAMCAddressTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SystemAMCAddressTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SystemAMCAddressTextActionPerformed

    private void SystemAMCNameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SystemAMCNameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SystemAMCNameTextActionPerformed

    private void emailIDFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailIDFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailIDFieldActionPerformed

    private void SendEmailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendEmailButtonActionPerformed
        // TODO add your handling code here:
        SystemAMCUsernameText.setEnabled(true);
        SystemAMCPasswordText.setEnabled(true);
        SystemAMCConfirmPasswordText.setEnabled(true);
        String pass2 = "1234";
        String emailId = emailIDField.getText();
        String CustomerUserName = SystemAMCNameText.getText();

        String CustomerPassword = SystemAMCNameText.getText().concat(pass2);
        String str1 = "Your USERNAME is: " + CustomerUserName;
        String str2 = "Your PASSWORD is: " + CustomerPassword;
        String Emailmsg = str1.concat(str2);

        System.out.println("In between"+CustomerUserName+" "+CustomerPassword+" "+ emailId);
        // boolean emailSent = EmailValidation.sendEmail(Emailmsg, emailId,CustomerUserName,CustomerPassword);
        try
        {
            boolean emailSent = EmailValidation.sendEmail(Emailmsg, emailId,CustomerUserName,CustomerPassword);

            if(!emailSent)
            {
                JOptionPane.showMessageDialog(null, "Please Enter a valid Email address! ","warning", JOptionPane.WARNING_MESSAGE);
                // organization.getPersonDirectory().getVolunteerList().remove((Volunteer)person);
                return;
            }
        }
        catch(Exception e){
            System.out.println("Please put valid EmailID");
        }
        //System.out.println(emailSent);

    }//GEN-LAST:event_SendEmailButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SendEmailButton;
    private javax.swing.JLabel SystemAMCAddressLabel;
    private javax.swing.JLabel SystemAMCAddressLabel1;
    private javax.swing.JTextField SystemAMCAddressText;
    private javax.swing.JButton SystemAMCBackButton;
    private javax.swing.JLabel SystemAMCConfirmPasswordLabel;
    private javax.swing.JTextField SystemAMCConfirmPasswordText;
    private javax.swing.JButton SystemAMCCreateButton;
    private javax.swing.JButton SystemAMCDeleteButton;
    private javax.swing.JLabel SystemAMCLabel;
    private javax.swing.JLabel SystemAMCLabel1;
    private javax.swing.JLabel SystemAMCNameLabel;
    private javax.swing.JTextField SystemAMCNameText;
    private javax.swing.JLabel SystemAMCPasswordLabel;
    private javax.swing.JTextField SystemAMCPasswordText;
    private javax.swing.JLabel SystemAMCPhoneNumberLabel;
    private javax.swing.JTextField SystemAMCPhoneNumberText;
    private javax.swing.JSeparator SystemAMCSeparator;
    private javax.swing.JButton SystemAMCSubmitButton;
    private javax.swing.JTable SystemAMCTable;
    private javax.swing.JLabel SystemAMCUsernameLabel;
    private javax.swing.JTextField SystemAMCUsernameText;
    private javax.swing.JButton SystemAMCViewButton;
    private javax.swing.JTextField emailIDField;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        DefaultTableModel dtmSAMC = (DefaultTableModel)SystemAMCTable.getModel();
        dtmSAMC.setRowCount(0);
        if(ecosystem.getCustomerDirectory().getCustomerList() != null)
        {
            for(Customer c: ecosystem.getCustomerDirectory().getCustomerList())
            {
                Object[] row = new Object[dtmSAMC.getColumnCount()];
                row[0]= c.getCustomerId();
                row[1]= c;
                dtmSAMC.addRow(row);
            }
        }
        if(dtmSAMC.getRowCount() == 0)
            {
                SystemAMCDeleteButton.setEnabled(false);
                SystemAMCViewButton.setEnabled(false);
            }
    }

    private boolean validateThisSAMC() {
        String regex = "\\d{10}";
        if(("".equals(SystemAMCUsernameText.getText())) || ("".equals(SystemAMCPasswordText.getText())) || ("".equals(SystemAMCConfirmPasswordText.getText())) 
                || ("".equals(SystemAMCNameText.getText())) || ("".equals(SystemAMCPhoneNumberText.getText())) || ("".equals(SystemAMCAddressText.getText())))
        {
            JOptionPane.showMessageDialog(null,"Please fill all details!", "Warning", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        else if(!(SystemAMCPasswordText.getText().equals(SystemAMCConfirmPasswordText.getText())))
        {
            JOptionPane.showMessageDialog(null,"Passwords do not match!", "Warning", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        else if(!(SystemAMCPhoneNumberText.getText().matches(regex)))
        {
            JOptionPane.showMessageDialog(null,"Mobile no. can have only 10 digits!", "Warning", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        else
        {
            return true;
        }
    }
}
